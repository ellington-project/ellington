name: ellington
version: "0.3.0"
author: Adam Harries <harries.adam@gmail.com>
about: Automated BPM calculation for swing dance DJs
subcommands:
    - init: 
        about: Initalise an ellington "library" - essentially a cache for computed estimator values
        args: 
            - SOURCE: 
                help: The source of the tracks with which to init the library. 
                required: false 
                index: 1 
                default_value: empty 
                possible_values: ['empty', 'stdin', 'directory', 'itunes']


            - LIBRARY:
                help: The library file to initialise
                required: false
                index: 2
                default_value: ".config/ellington/library.json"


            # - empty: 
            #     short: e
            #     long: empty 
            #     required: false
            #     takes_value: false 
            #     help: Initialise an empty library, that will later be filled with query information. 
            #     conflicts_with: itunes
            #     conflicts_with: directory
            #     conflicts_with: stdin

            - itunes:
                short: i
                long: itunes
                value_name: itunes
                required_if: 
                    - [SOURCE, itunes]
                takes_value: true
                help: The iTunes library file with track information.

            - directory: 
                help: A directory containing (recursively) audio files to process
                short: d 
                long: directory
                value_name: directory
                required_if: 
                    - [SOURCE, directory]
                takes_value: true
                default_value: "~/Music/"

            # - stdin: 
            #     short: s 
            #     long: stdin 
            #     required: false 
            #     takes_value: false 
            #     help: Read audio track file paths from stdin
            #     conflicts_with: empty
            #     conflicts_with: itunes
            #     conflicts_with: directory

           
    
    - query:
        about: Query a file for tempo information, stored either in the file, in cache, or obtained from estimators. 
        args: 

            - AUDIOFILE: 
                help: The audio file about which to query information. 
                required: true 
                index: 1

            - LIBRARY: 
                help: The ellington library to read cached results from. 
                required: false 
                index: 2 
                default_value: "~/.config/ellington/library.json"

            # Metadata configuration options
            - metadata: 
                help: The source of the metadata string to update with ellington data. 
                required: false 
                short: m
                long: metadata 
                takes_value: true 
                possible_values: ['title', 'comments', 'userdata']

            - modification: 
                help: The kind of modification behaviour to perform on "raw" metadata (i.e. metadata without any existing ellington data). If the metadata already contains ellington data, it will be updated.
                required: false 
                requires: metadata 
                short: b
                long: modification 
                takes_value: true 
                possible_values: ['prepend', 'append']

            - userdata: 
                help: User supplied metadata to update with ellington data. 
                required: false 
                requires: metadata 
                required_if: 
                    - [metadata, userdata]
                short: u 
                long: userdata
                takes_value: true

            - estimators: 
                help: Run the following estimators, or query their results from the cache, and report the results. If not specified, "all" is assumed. 
                required: false 
                short: e 
                long: estimators
                takes_value: true 
                possible_values: ['actual', 'naive', 'bellson', 'all']
                default_value: all

            - lazy: 
                help: Run the query lazily - i.e. only run it if values cannot be found in the cache or the track metadata.
                required: false 
                short: l 
                long: lazy 
                takes_value: false
                conflicts_with: eager

            - eager: 
                help: Eagerly run the estimators - i.e. run all the estimators even if there are already values in the cache or track metadata. 
                required: false 
                short: f
                long: eager
                takes_value: false 
                conflicts_with: lazy

            - prefer_source: 
                help: If ellington data can be found in multiple sources (e.g. in the library, in the track comment, and the title, etc), which source should be considered "canonical". 
                

            # Reporting options. 
            - minimal: 
                help: Print the output using the minimal formatter. 
                short: s 
                long: minimal
                conflicts_with: readable
                conflicts_with: json

            - readable:
                help: Print the output in a nice human readable format. 
                short: r
                long: readable 
                conflicts_with: minimal
                conflicts_with: metadata
                conflicts_with: json

            - json: 
                help: Print the output in json, rather than the custom ellington format. 
                short: j 
                long: json 
                conflicts_with: minimal 
                conflicts_with: metadata 
                conflicts_with: readable

            # Caching/writing options. 
            - pure: 
                help: Run the query command in a "pure" manner - i.e. without side effects, and without updating the library. 
                short: p 
                long: pure 